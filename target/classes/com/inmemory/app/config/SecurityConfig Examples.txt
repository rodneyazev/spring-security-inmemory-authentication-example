/* Example 2

		@Bean
		InMemoryUserDetailsManager user() {
			return new InMemoryUserDetailsManager(
					User
						.withUsername("user")
						.password("{noop}password")
						.authorities("read")
						.build()
			);
		}
		
		@Bean
		SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
			return http
					.csrf(csrf -> csrf.disable())
					.authorizeHttpRequests(
							auth -> auth
								// .requestMatchers("**").permitAll()
								.anyRequest().authenticated())
					.sessionManagement(
							session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
					.httpBasic(withDefaults())
					.build();
		}

*/




/* Example 3

		@Bean
		static PasswordEncoder passwordEncoder() {
			return new BCryptPasswordEncoder();
		}
		@Bean
		SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
			http
				.csrf(csrf -> csrf
						.disable())
				.authorizeHttpRequests(
					auth -> auth
						.anyRequest().authenticated())
				.httpBasic(Customizer.withDefaults());
			return http.build();
		}
		
		@Bean
		UserDetailsService userDetailsService() {
			
			UserDetails user = User.builder()
					.username("user")
					.password(passwordEncoder().encode("password"))
					.roles("USER").build();
			
			UserDetails admin = User.builder().username("admin")
					.password(passwordEncoder().encode("password"))
					.roles("ADMIN").build();
			
			return new InMemoryUserDetailsManager(user, admin);
		}

*/